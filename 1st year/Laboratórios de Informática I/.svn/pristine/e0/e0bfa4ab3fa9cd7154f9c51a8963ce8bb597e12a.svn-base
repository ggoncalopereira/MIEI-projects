module Main where

import Graphics.Gloss
import Graphics.Gloss.Data.Picture
import qualified Data.Text as T
import GlossExtras

main = do inp <- getContents
          let (x,y) = tarefa5 (readPicture inp)
          putStrLn (show (round x) ++ " " ++ show (round y))

tarefa5 :: Picture -> (Float, Float)
tarefa5 x = ((abs a)+(abs c),(abs b)+(abs d))
            where (a,b,c,d) = envolvingFigure x

envolvingFigure :: Picture -> (Float, Float, Float, Float)
envolvingFigure (Pictures x)= finalEnvolvingPicture (map envolvingFigure x) (0.0, 0.0, 0.0, 0.0)
envolvingFigure (Blank) = (a, a, a, a)
                          where a = 0 :: Float
envolvingFigure (Polygon x) = (a, b, c, d) --cima direita baixo esquerda
                          where a = maximum (map (\(px,_) -> px) x)
                                b = maximum (map (\(_,pw) -> pw) x)
                                c = minimum (map (\(px,_) -> px) x)
                                d = minimum (map (\(_,pw) -> pw) x)
envolvingFigure (Line x) = (a, b, c, d) --cima direita baixo esquerda
                          where a = maximum (map (\(px,_) -> px) x)
                                b = maximum (map (\(_,pw) -> pw) x)
                                c = minimum (map (\(px,_) -> px) x)
                                d = minimum (map (\(_,pw) -> pw) x)
envolvingFigure (Circle x)  = (x,x,(-x),(-x))
envolvingFigure (Bitmap x y _ _) = ((b/2), (a/2), -(b/2), -(a/2))
                            where a = fromIntegral x
                                  b = fromIntegral y
envolvingFigure (Color _ _) = (a, a, a, a)
                    where a = 0 :: Float
envolvingFigure (Translate x y pic) = translatePicture (envolvingFigure pic) x y
--envolvingFigure Rotate x pic = rotatePicture pic x
envolvingFigure (Scale x y pic) = scalePicture (envolvingFigure pic) x y



translatePicture :: (Float, Float, Float, Float) -> Float -> Float -> (Float, Float, Float, Float)
translatePicture (a,b,c,d) x y = (a+y,b+x,c+y,d+x)

scalePicture :: (Float, Float, Float, Float) -> Float -> Float -> (Float, Float, Float, Float)
scalePicture (a,b,c,d) x y = (a*y,b*x,c*y,d*x)

finalEnvolvingPicture :: [(Float, Float, Float, Float)] -> (Float, Float, Float, Float) -> (Float, Float, Float, Float)
finalEnvolvingPicture [] (a,b,c,d) = (a,b,c,d) 
finalEnvolvingPicture ((a,b,c,d):resto) (w,x,y,z) | (aa>ww) && (bb>xx) && (cc>yy) && (dd>zz) = finalEnvolvingPicture resto (a,b,c,d)
                                                  | (aa>ww) && (bb>xx) && (cc>yy) && (dd<zz) = finalEnvolvingPicture resto (a,b,c,z)
                                                  | (aa>ww) && (bb>xx) && (cc<yy) && (dd>zz) = finalEnvolvingPicture resto (a,b,y,d)
                                                  | (aa>ww) && (bb>xx) && (cc<yy) && (dd<zz) = finalEnvolvingPicture resto (a,b,y,z)
                                                  | (aa>ww) && (bb<xx) && (cc>yy) && (dd>zz) = finalEnvolvingPicture resto (a,x,c,d)
                                                  | (aa>ww) && (bb<xx) && (cc>yy) && (dd<zz) = finalEnvolvingPicture resto (a,x,c,z)
                                                  | (aa>ww) && (bb<xx) && (cc<yy) && (dd>zz) = finalEnvolvingPicture resto (a,x,y,d)
                                                  | (aa>ww) && (bb<xx) && (cc<yy) && (dd<zz) = finalEnvolvingPicture resto (a,x,y,z)
                                                  | (aa<ww) && (bb>xx) && (cc>yy) && (dd>zz) = finalEnvolvingPicture resto (w,b,c,d)
                                                  | (aa<ww) && (bb>xx) && (cc>yy) && (dd<zz) = finalEnvolvingPicture resto (w,b,c,z)
                                                  | (aa<ww) && (bb>xx) && (cc<yy) && (dd>zz) = finalEnvolvingPicture resto (w,b,y,d)
                                                  | (aa<ww) && (bb>xx) && (cc<yy) && (dd<zz) = finalEnvolvingPicture resto (w,b,y,z)
                                                  | (aa<ww) && (bb<xx) && (cc>yy) && (dd>zz) = finalEnvolvingPicture resto (w,x,c,d)
                                                  | (aa<ww) && (bb<xx) && (cc>yy) && (dd<zz) = finalEnvolvingPicture resto (w,x,c,z)
                                                  | (aa<ww) && (bb<xx) && (cc<yy) && (dd>zz) = finalEnvolvingPicture resto (w,x,y,d)
                                                  | (aa<ww) && (bb<xx) && (cc<yy) && (dd<zz) = finalEnvolvingPicture resto (w,x,y,z)
                                                  where aa = (abs a)
                                                        bb = (abs b)
                                                        cc = (abs c)
                                                        dd = (abs d)
                                                        ww = (abs w)
                                                        xx = (abs x)
                                                        yy = (abs y)
                                                        zz = (abs z)